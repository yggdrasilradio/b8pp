
	' TIC TAC TOE by Rick Adams

	' Indexing function
	def fni(r, c) = (r - 1) * 3 + c

	' Allocate arrays
	dim a(9), b(4), c(24), d(4), e(4)

	' Define the 8 winning lines
	for i = 1 to 24
		read c(i)
	next i

	' Horizontal lines
	data 1, 2, 3
	data 4, 5, 6
	data 7, 8, 9

	' Vertical lines
	data 1, 4, 7
	data 2, 5, 8
	data 3, 6, 9

	' Diagonal lines
	data 1, 5, 9
	data 3, 5, 7

	' Define the 4 side squares
	for i = 1 to 4
		read b(i)
	next i
	data 2, 4, 6, 8

	' Define the 4 corner squares
	for i = 1 to 4
		read d(i)
	next i
	data 1, 3, 7, 9

	' Game title
5	print "TIC TAC TOE"

	' Show board positions
	for i = 1 to 9
		a(i) = i + 16 ' "1" through "9"
	next i
	gosub 100

	' Clear board
	for i = 1 to 9
		a(i) = 0
	next i

	' Input player's move
10	print
	print "Your move";
	input m

	if s > 0 then 12
		randomize

	' Validate move
12	m = int(m)
	if m < 1 then 15
	if m > 9 then 15
	goto 20

	' No good
15	print "Illegal move"
	goto 10

	' Move is 1 through 9, but is that square occupied?
20	if a(m) <> 0 then 15

	' Make player's move
25	a(m) = 56 ' "X"

	' Display the board
	gosub 100

	' Evaluate game state
	gosub 300
	if x = 3 then 30	' Player wins?
	if n = 24 then 40	' Tie game?

	' Make computer move
	gosub 200

	' Display the board
	gosub 100

	' Evaluate game state
	gosub 300
	if o = 3 then 35	' Computer wins?
	if n = 24 then 40	' Tie game?

	' Keep playing
	goto 10

30	print
	print "Player wins!"
	stop

35	print
	print "Computer wins!"
	stop

40	print
	print "Tie game!"
	stop

	' Display Tic Tac Toe board
100	print
	for i = 1 to 3
		print " ";
		for j = 1 to 3
			print chr$(a(fni(i, j)) + 32);
			if j = 3 then 110
				print " ! ";
110		next j
		print
		if i = 3 then 120
			print "---+---+---"
120	next i
	return

	' Make the computer's move
	
	' WIN: Look for winning or blocking move
200	gosub 400
	if m > 0 then 220

	' DUMB: Make a dumb move every once in a while
	' Otherwise this thing is pretty much unbeatable
	gosub 900
	if m > 0 then 220

	' CENTER: Take the center if you can
	gosub 500
	if m > 0 then 220

	' NOFORK: Block corner fork trap
	gosub 600
	if m > 0 then 220

	' CORNER: Take a corner if possible
	gosub 700
	if m > 0 then 220

	' RANDOM: Make a random move
212	gosub 800

220	a(m) = 47 ' "O"		' Make the move
	print
	print "Computer's move:"; m;
	print "("; f$; ")";	' DEBUG
	print
	return

	' Evaluate game state
300	n = 0				' Number of occupied cells
	s = 0
	for i = 1 to 9			' Serialize game board state
		s = s * 3
		if a(i) <> 47 then 302
			s = s + 1
302		if a(i) <> 56 then 304
			s = s + 2
304	next i
	for i = 1 to 22 step 3		' Examine each of 8 lines
		x = 0			' Number of Xs in line
		o = 0			' Number of Os in line
		for j = i to i + 2
			if a(c(j)) = 0 then 310
				n = n + 1	' One more occupied cell
310			if a(c(j)) <> 56 then 320
				x = x + 1	' One more X in this line
320			if a(c(j)) <> 47 then 330
				o = o + 1	' One more O in this line
330		next j
		if x <> 3 then 340	' Line has all Xs?
			return		' X wins
340		if o <> 3 then 350	' Line has all Os?
			return		' O wins
350		if n <> 24 then 360	' Every cell of every line filled?
			return		' Tie game
360	next i
	return

	' Find any winning or blocking moves for computer's turn
400	m = 0	' No move decision yet
	w = 0	' No winning move yet
	b = 0	' No blocking move yet
	for i = 1 to 22 step 3		' Examine each of 8 lines
		n = 0			' Number of Xs and Os in line
		x = 0			' Number of Xs in line
		o = 0			' Number of Os in line
		e = 0			' Index of empty cell
		for j = i to i + 2
			if a(c(j)) <> 56 then 420
				x = x + 1	' One more X in this line
				n = n + 1
420			if a(c(j)) <> 47 then 430
				o = o + 1	' One more O in this line
				n = n + 1
430			if a(c(j)) > 0 then 440
				e = c(j)	' Index of empty cell
440		next j
		if n = 3 then 460	' Line is full? No moves there!
		if o <> 2 then 450	' Line has two Os?
			w = e		' Winning move
450		if x <> 2 then 460	' Line has two Xs?
			b = e		' Blocking move
460	next i
	if w = 0 then 470	' Take winning move if there is one
		m = w
		f$ = "WIN"
		return
470	if b = 0 then 480	' Take blocking move if there is one
		m = b
		f$ = "BLOCK"
480	return

	' CENTER
500	f$ = "CENTER"
	if a(5) > 0 then 510	' Can we take the center square?
	m = 5			' Take center square
510	return

	' NOFORK
600	f$ = "NOFORK"
	if s = 13205 then 610	' One move away from a fork trap?
	if s <> 1557 then 620
610	m = b(int(4 * rnd(0)) + 1)	' Block with a side square
620	return

	' CORNER
700	c = 0
700	f$ = "CORNER"
	for i = 1 to 4		' Try to find a corner square
		if a(d(i)) > 0 then 710
			c = c + 1
			e(c) = d(i) ' Found one
710	next i
	if c = 0 then 720
		m = e(int(c * rnd(0)) + 1) ' Choose random corner
720	return

	' RANDOM
800	f$ = "RANDOM"
810	m = int(9 * rnd(0)) + 1	' Try random move as a Hail Mary
	if a(m) <> 0 then 810	' Keep trying till an empty cell found
	return

	' DUMB
900	f$ = "DUMB"
	if int(100 * rnd(0)) + 1 > 20 then 910 ' 20% chance
	gosub 810
910	return
